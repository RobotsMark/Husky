%% 
husky_id = 3; % Modify for your Husky
config = GetHuskyConfig(husky_id);
client = ['ExampleCdtClient' num2str(int32(rand*1e7))];
mexmoos('init', 'SERVERHOST', config.host, 'MOOSNAME', client);
mexmoos('REGISTER', config.laser_channel, 0.0);
mexmoos('REGISTER', config.stereo_channel, 0.0);
mexmoos('REGISTER', config.wheel_odometry_channel, 0.0);
pause(3); 


% 
%     % Display stereo image
%     subplot(1, 3, 2);
%     ShowStereoImage(stereo_images)
% 
%     % Display undistorted stereo image
%     subplot(1, 3, 3);
%     ShowStereoImage(UndistortStereoImage(stereo_images, ...
%                                      config.camera_model));

%%
initialise_state = [0.0; 0.0; 0.0];
initialise_covariance = diag([0.01,0.01,0.01]);
% initialise_goal = [5.0,0.0,0.0]';

statevector = initialise_state;
covariance = initialise_covariance;
old_wheel_odometry = [];

while length(old_wheel_odometry)<1
    mailbox = mexmoos('FETCH');
    old_wheel_odometry = GetWheelOdometry(mailbox, ...
                                      config.wheel_odometry_channel, ...
                                      true);
end

old_ml = old_wheel_odometry.m_l;
old_mr = old_wheel_odometry.m_r;
    
%initial graphics - plot true map
figure(1); hold on; grid off; axis equal;
plot(statevector(1),statevector(2),'b-');hold on;
set(gcf,'doublebuffer','on');
hObsLine = line([0,0],[0,0]);
set(hObsLine,'linestyle',':');

% statevector_store = zeros(2,1);

while true

% Fetch latest messages from mex-moos
mailbox = mexmoos('FETCH');
scan = GetLaserScans(mailbox, config.laser_channel, true);
% stereo_images = GetStereoImages(mailbox, config.stereo_channel, true);
new_wheel_odometry = GetWheelOdometry(mailbox, ...
                                  config.wheel_odometry_channel, ...
                                  true);
if ~isempty(new_wheel_odometry)                         
    new_ml = new_wheel_odometry.m_l;
    new_mr = new_wheel_odometry.m_r;
else
    new_ml = old_ml;
    new_mr = old_mr;
end

% Get features from laser
if length(scan)>0
    observations = getPoleCoords(scan);
else 
    observations = [];
end
% Get relative motion
rel_motion = CalculateControlVector( new_ml-old_ml, new_mr-old_mr);
old_ml = new_ml;
old_mr= new_mr;

old_sv_length = length(statevector);

% Update using SLAM
[statevector, covariance] = SLAMUpdate(rel_motion, observations, ...
    statevector, covariance);

% statevector_store = vertcat(statevector_store, statevector);

new_sv_length = length(statevector);

% Plot new position
scatter(statevector(1),statevector(2),'b-'); hold on;

% Plot new features
if new_sv_length > old_sv_length
   new_features = (new_sv_length - old_sv_length)/2;
   
  for i = 1:new_features
      xind = old_sv_length + 2*i - 1 ;
      yind = old_sv_length + 2*i;
      plot(statevector(xind),statevector(yind),'g*');hold on;
  end
  
end


end
